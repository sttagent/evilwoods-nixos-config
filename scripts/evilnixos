#!/usr/bin/env xonsh

import argparse
import json
import questionary
import inspect

def get_args():
    arg_parser = argparse.ArgumentParser(description = "Apply nixosConfigurations to local or remote hosts")
    arg_parser.add_argument('--debug', action='store_true', help="dry run")

    common_parser = argparse.ArgumentParser(add_help=False)
    common_parser.add_argument('-t', '--target-host', type=str, help="the host is remote")
    common_parser.add_argument('nixos_config', nargs='?', help="the nixos configuration to apply", default=None)

    sub_parsers = arg_parser.add_subparsers(
        title="subcommands", dest="subcommand", required=True, help="sub-command help")
    build_parser = sub_parsers.add_parser(
        'build', aliases=['b'], help="build the nixos configuration", parents=[common_parser])
    build_parser.add_argument('--diff', action='store_true', help="perform a diff after build")

    diff_parser = sub_parsers.add_parser(
        'diff', aliases=["d"], help="diff the new nixos configuration with the old", parents=[common_parser])
    test_parser = sub_parsers.add_parser(
        'test', aliases=["t"], help="test the nixos configuration", parents=[common_parser])
    switch_parser = sub_parsers.add_parser(
        'switch', aliases=["s"], help="switch to the new nixos configuration", parents=[common_parser])

    boot_parser = sub_parsers.add_parser(
        'boot', aliases=["bo"], help="boot to the new nixos configuration", parents=[common_parser])
    boot_parser.add_argument('--reboot', action='store_true', help="reboot after applying the new configuration")

    return arg_parser.parse_args()

def build_nvd_cmd(args, remote=False):
    closure = $(realpath ./result);
    if remote:
        return inspect.cleandoc(f"""
            closure = $(realpath ./result)
            if '{args.nixos_config}' in closure:
                nix copy --substitute-on-destination --to ssh://root@{args.target_host} @(closure)
                ssh root@{args.target_host} nix run 'nixpkgs#nvd' -- diff /run/current-system/ @(closure)
            else:
                print("config closure missmatch")
        """
        )
    else:
        return inspect.cleandoc(
            f"""
                closure = $(realpath ./result)
                if '{args.nixos_config}' in closure:
                    nvd diff /run/current-system ./result/
            """
        )

def build_nixos_rebuild_cmd(args, remote=False):
    cmd = "nixos-rebuild {} {} --flake '.#{}' {}".format(
        args.subcommand,
        "--sudo" if not remote else "",
        args.nixos_config,
        f"--target-host root@{args.target_host}" if remote else ""
    )
    return cmd

def build_reboot_cmd(args, remote=False):
    if remote:
        return f"ssh root@{args.target_host} systemctl reboot"
    else:
        return "sudo systemctl reboot"

def build_cmd(args):
    cmds = []
    is_remote = $(hostname) != args.nixos_config
    match args.subcommand:
        case "diff":
            cmds.append(build_nvd_cmd(args, is_remote))
        case "build":
            cmds.append(build_nixos_rebuild_cmd(args) + " err>out | nom")
            if args.diff:
                cmds.append(build_nvd_cmd(args, is_remote))
        case "boot":
            cmds.append(build_nixos_rebuild_cmd(args, is_remote))
            if args.reboot:
                cmds.append(build_reboot_cmd(args, is_remote))
        case _:
            cmds.append(build_nixos_rebuild_cmd(args, is_remote))
    return cmds

def choose_nixos_config():
    nixos_configurations = !(@thread nix flake show --json)
    nixos_configurations.rtn
    config_name_list = json.loads(nixos_configurations.output)["nixosConfigurations"].keys()
    choice = questionary.select("Select a configuration", choices=config_name_list).ask()
    return choice

def main():
    args = get_args()

    args.nixos_config = choose_nixos_config() if args.nixos_config is None else args.nixos_config
    args.target_host = args.nixos_config if args.target_host is None else args.target_host

    if args.debug:
        print(args)

    cmds = build_cmd(args)
    $RAISE_SUBPROC_ERROR = True
    for cmd in cmds:
        print(cmd)
        if not args.debug:
            try:
                execx(cmd)
            except Exception as e:
                print("Command failed:")
                print(cmd)
                print(e)
                break


if __name__ == '__main__':
    main()
