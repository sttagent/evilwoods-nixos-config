#!/usr/bin/env xonsh

import argparse
import json
import questionary

def get_args():
    arg_parser = argparse.ArgumentParser(description = "Apply nixosConfigurations to local or remote hosts")
    arg_parser.add_argument('-t', '--target-host', type=str, help="the host is remote")
    arg_parser.add_argument('nixos_rebuild_action', choices=["build", "diff", "test", "switch", "boot"] , help="nixos-rebuild action to perform")
    arg_parser.add_argument('nixos_config', nargs='?', help="the nixos configuration to apply", default=None)
    return arg_parser.parse_args()

def get_nixosConfigurations():
    return json.loads($(nix --quiet flake show --json))["nixosConfigurations"].keys()

def run_nvd_cmds(nixos_config, remote=False):
    if remote:
        closure = $(realpath ./result)
        nix copy --substitute-on-destination --to ssh://root@@(nixos_config) @(closure) \
        and ssh root@@(nixos_config) nix run "nixpkgs#nvd" -- diff /run/current-system/ @(closure)
    else:
        nvd diff /run/current-system ./result/

def run_nxoos_rebuild_cmds(nixos_rebuild_action, nixos_config, remote=False):
    if nixos_rebuild_action == "build":
        nixos-rebuild build --flake @(f".#{nixos_config}") err>out | nom
    else:
        if remote:
            nixos-rebuild @(nixos_rebuild_action) --flake @(f".#{nixos_config}") --target-host root@@(nixos_config)
        else:
            nixos-rebuild @(nixos_rebuild_action) --flake @(f".#{nixos_config}") --use-remote-sudo

def build_nixos_rebuild_cmd(nixos_rebuild_action, nixos_config, remote=False):
    cmd = ""
    if nixos_rebuild_action == "diff":
        run_nvd_cmds(nixos_config, remote)
    else:
        run_nxoos_rebuild_cmds(nixos_rebuild_action, nixos_config, remote)


def parse_flake_json(flake_json):
    flake_json.rtn
    return json.loads(flake_json.output)["nixosConfigurations"].keys()

def main():
    args = get_args()

    choice = args.nixos_config
    if choice is None:
        nixos_configurations = !(@thread nix flake show --json)
        config_list = parse_flake_json(nixos_configurations)
        choice = questionary.select("Select a configuration", choices=config_list).ask()
    
    is_local = lambda host: $(hostname) == host
    build_nixos_rebuild_cmd(args.nixos_rebuild_action, choice, remote=(not is_local(choice)))

if __name__ == '__main__':
    main()
